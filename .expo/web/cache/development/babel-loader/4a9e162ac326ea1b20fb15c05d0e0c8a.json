{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\nimport Text from \"./Text\";\nimport defaultStyles from \"../config/styles\";\nimport PickerItem from \"./PickerItem\";\nimport Screen from \"./Screen\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nfunction AppPicker(_ref) {\n  var icon = _ref.icon,\n      items = _ref.items,\n      _ref$numberOfColumns = _ref.numberOfColumns,\n      numberOfColumns = _ref$numberOfColumns === void 0 ? 1 : _ref$numberOfColumns,\n      onSelectItem = _ref.onSelectItem,\n      _ref$PickerItemCompon = _ref.PickerItemComponent,\n      PickerItemComponent = _ref$PickerItemCompon === void 0 ? PickerItem : _ref$PickerItemCompon,\n      placeholder = _ref.placeholder,\n      selectedItem = _ref.selectedItem,\n      _ref$width = _ref.width,\n      width = _ref$width === void 0 ? \"100%\" : _ref$width;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      modalVisible = _useState2[0],\n      setModalVisible = _useState2[1];\n\n  return _jsxs(_Fragment, {\n    children: [_jsx(TouchableWithoutFeedback, {\n      onPress: function onPress() {\n        return setModalVisible(true);\n      },\n      children: _jsxs(View, {\n        style: [styles.container, {\n          width: width\n        }],\n        children: [icon && _jsx(MaterialCommunityIcons, {\n          name: icon,\n          size: 20,\n          color: defaultStyles.colors.medium,\n          style: styles.icon\n        }), selectedItem ? _jsx(Text, {\n          style: styles.text,\n          children: selectedItem.label\n        }) : _jsx(Text, {\n          style: styles.placeholder,\n          children: placeholder\n        }), _jsx(MaterialCommunityIcons, {\n          name: \"chevron-down\",\n          size: 20,\n          color: defaultStyles.colors.medium\n        })]\n      })\n    }), _jsx(Modal, {\n      visible: modalVisible,\n      animationType: \"slide\",\n      children: _jsxs(Screen, {\n        children: [_jsx(Button, {\n          title: \"Close\",\n          onPress: function onPress() {\n            return setModalVisible(false);\n          }\n        }), _jsx(FlatList, {\n          data: items,\n          keyExtractor: function keyExtractor(item) {\n            return item.value.toString();\n          },\n          numColumns: numberOfColumns,\n          renderItem: function renderItem(_ref2) {\n            var item = _ref2.item;\n            return _jsx(PickerItemComponent, {\n              item: item,\n              label: item.label,\n              onPress: function onPress() {\n                setModalVisible(false);\n                onSelectItem(item);\n              }\n            });\n          }\n        })]\n      })\n    })]\n  });\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: defaultStyles.colors.light,\n    borderRadius: 25,\n    flexDirection: \"row\",\n    padding: 15,\n    marginVertical: 10\n  },\n  icon: {\n    marginRight: 10\n  },\n  placeholder: {\n    color: defaultStyles.colors.medium,\n    flex: 1\n  },\n  text: {\n    flex: 1\n  }\n});\nexport default AppPicker;","map":{"version":3,"sources":["/Users/macbookpro/MobileApp/school_app_react_native/app/components/Picker.js"],"names":["React","useState","MaterialCommunityIcons","Text","defaultStyles","PickerItem","Screen","AppPicker","icon","items","numberOfColumns","onSelectItem","PickerItemComponent","placeholder","selectedItem","width","modalVisible","setModalVisible","styles","container","colors","medium","text","label","item","value","toString","StyleSheet","create","backgroundColor","light","borderRadius","flexDirection","padding","marginVertical","marginRight","color","flex"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  View,\n  StyleSheet,\n  TouchableWithoutFeedback,\n  Modal,\n  Button,\n  FlatList,\n} from \"react-native\";\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\n\nimport Text from \"./Text\";\nimport defaultStyles from \"../config/styles\";\nimport PickerItem from \"./PickerItem\";\nimport Screen from \"./Screen\";\n\nfunction AppPicker({\n  icon,\n  items,\n  numberOfColumns = 1,\n  onSelectItem,\n  PickerItemComponent = PickerItem,\n  placeholder,\n  selectedItem,\n  width = \"100%\",\n}) {\n  const [modalVisible, setModalVisible] = useState(false);\n\n  return (\n    <>\n      <TouchableWithoutFeedback onPress={() => setModalVisible(true)}>\n        <View style={[styles.container, { width }]}>\n          {icon && (\n            <MaterialCommunityIcons\n              name={icon}\n              size={20}\n              color={defaultStyles.colors.medium}\n              style={styles.icon}\n            />\n          )}\n          {selectedItem ? (\n            <Text style={styles.text}>{selectedItem.label}</Text>\n          ) : (\n            <Text style={styles.placeholder}>{placeholder}</Text>\n          )}\n\n          <MaterialCommunityIcons\n            name=\"chevron-down\"\n            size={20}\n            color={defaultStyles.colors.medium}\n          />\n        </View>\n      </TouchableWithoutFeedback>\n      <Modal visible={modalVisible} animationType=\"slide\">\n        <Screen>\n          <Button title=\"Close\" onPress={() => setModalVisible(false)} />\n          <FlatList\n            data={items}\n            keyExtractor={(item) => item.value.toString()}\n            numColumns={numberOfColumns}\n            renderItem={({ item }) => (\n              <PickerItemComponent\n                item={item}\n                label={item.label}\n                onPress={() => {\n                  setModalVisible(false);\n                  onSelectItem(item);\n                }}\n              />\n            )}\n          />\n        </Screen>\n      </Modal>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: defaultStyles.colors.light,\n    borderRadius: 25,\n    flexDirection: \"row\",\n    padding: 15,\n    marginVertical: 10,\n  },\n  icon: {\n    marginRight: 10,\n  },\n  placeholder: {\n    color: defaultStyles.colors.medium,\n    flex: 1,\n  },\n  text: {\n    flex: 1,\n  },\n});\n\nexport default AppPicker;\n"]},"metadata":{},"sourceType":"module"}